//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.1432.
// 


/// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
[global::System.Serializable()]
[global::System.ComponentModel.DesignerCategoryAttribute("code")]
[global::System.ComponentModel.ToolboxItem(true)]
[global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
[global::System.Xml.Serialization.XmlRootAttribute("ReqTable")]
[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
public partial class ReqTable : global::System.Data.DataSet {
    
    private RequirementDataTable tableRequirement;
    
    private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public ReqTable() {
        this.BeginInit();
        this.InitClass();
        global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        base.Relations.CollectionChanged += schemaChangedHandler;
        this.EndInit();
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected ReqTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
            base(info, context, false) {
        if ((this.IsBinarySerialized(info, context) == true)) {
            this.InitVars(false);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler1;
            this.Relations.CollectionChanged += schemaChangedHandler1;
            return;
        }
        string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
        if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
            global::System.Data.DataSet ds = new global::System.Data.DataSet();
            ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            if ((ds.Tables["Requirement"] != null)) {
                base.Tables.Add(new RequirementDataTable(ds.Tables["Requirement"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
        }
        this.GetSerializationData(info, context);
        global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        this.Relations.CollectionChanged += schemaChangedHandler;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public RequirementDataTable Requirement {
        get {
            return this.tableRequirement;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.BrowsableAttribute(true)]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
    public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
        get {
            return this._schemaSerializationMode;
        }
        set {
            this._schemaSerializationMode = value;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new global::System.Data.DataTableCollection Tables {
        get {
            return base.Tables;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new global::System.Data.DataRelationCollection Relations {
        get {
            return base.Relations;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void InitializeDerivedDataSet() {
        this.BeginInit();
        this.InitClass();
        this.EndInit();
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public override global::System.Data.DataSet Clone() {
        ReqTable cln = ((ReqTable)(base.Clone()));
        cln.InitVars();
        cln.SchemaSerializationMode = this.SchemaSerializationMode;
        return cln;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeTables() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeRelations() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
        if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
            this.Reset();
            global::System.Data.DataSet ds = new global::System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Requirement"] != null)) {
                base.Tables.Add(new RequirementDataTable(ds.Tables["Requirement"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXml(reader);
            this.InitVars();
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
        global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
        this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
        stream.Position = 0;
        return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars() {
        this.InitVars(true);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars(bool initTable) {
        this.tableRequirement = ((RequirementDataTable)(base.Tables["Requirement"]));
        if ((initTable == true)) {
            if ((this.tableRequirement != null)) {
                this.tableRequirement.InitVars();
            }
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void InitClass() {
        this.DataSetName = "ReqTable";
        this.Prefix = "";
        this.Namespace = "http://schemas.microsoft.com/windows/ProtocolsTest/2007/07/RequirementTable";
        this.EnforceConstraints = true;
        this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        this.tableRequirement = new RequirementDataTable();
        base.Tables.Add(this.tableRequirement);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeRequirement() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
        if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
            this.InitVars();
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
        ReqTable ds = new ReqTable();
        global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
        global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
        global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
        any.Namespace = ds.Namespace;
        sequence.Items.Add(any);
        type.Particle = sequence;
        global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
        if (xs.Contains(dsSchema.TargetNamespace)) {
            global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
            global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
            try {
                global::System.Xml.Schema.XmlSchema schema = null;
                dsSchema.Write(s1);
                for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                    schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                    s2.SetLength(0);
                    schema.Write(s2);
                    if ((s1.Length == s2.Length)) {
                        s1.Position = 0;
                        s2.Position = 0;
                        for (; ((s1.Position != s1.Length) 
                                    && (s1.ReadByte() == s2.ReadByte())); ) {
                            ;
                        }
                        if ((s1.Position == s1.Length)) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if ((s1 != null)) {
                    s1.Close();
                }
                if ((s2 != null)) {
                    s2.Close();
                }
            }
        }
        xs.Add(dsSchema);
        return type;
    }
    
    public delegate void RequirementRowChangeEventHandler(object sender, RequirementRowChangeEvent e);
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class RequirementDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnREQ_ID;
        
        private global::System.Data.DataColumn columnDoc_Sect;
        
        private global::System.Data.DataColumn columnDescription;
        
        private global::System.Data.DataColumn columnPos;
        
        private global::System.Data.DataColumn columnNeg;
        
        private global::System.Data.DataColumn columnDerived;
        
        private global::System.Data.DataColumn columnScenario;
        
        private global::System.Data.DataColumn columnIsExtension;
        
        private global::System.Data.DataColumn columnBehavior;
        
        private global::System.Data.DataColumn columnActor;
        
        private global::System.Data.DataColumn columnScope;
        
        private global::System.Data.DataColumn columnPriority;
        
        private global::System.Data.DataColumn columnIsNormative;
        
        private global::System.Data.DataColumn columnVerification;
        
        private global::System.Data.DataColumn columnVerificationComment;
        
        private global::System.Data.DataColumn columnReviewComment;
        
        private global::System.Data.DataColumn columnInternalId;
        
        private global::System.Data.DataColumn columnTDTextDiff;
        
        private global::System.Data.DataColumn columnDelta;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RequirementDataTable() {
            this.TableName = "Requirement";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal RequirementDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected RequirementDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn REQ_IDColumn {
            get {
                return this.columnREQ_ID;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn Doc_SectColumn {
            get {
                return this.columnDoc_Sect;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn DescriptionColumn {
            get {
                return this.columnDescription;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn PosColumn {
            get {
                return this.columnPos;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn NegColumn {
            get {
                return this.columnNeg;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn DerivedColumn {
            get {
                return this.columnDerived;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ScenarioColumn {
            get {
                return this.columnScenario;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn IsExtensionColumn {
            get {
                return this.columnIsExtension;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn BehaviorColumn {
            get {
                return this.columnBehavior;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ActorColumn {
            get {
                return this.columnActor;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ScopeColumn {
            get {
                return this.columnScope;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn PriorityColumn {
            get {
                return this.columnPriority;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn IsNormativeColumn {
            get {
                return this.columnIsNormative;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn VerificationColumn {
            get {
                return this.columnVerification;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn VerificationCommentColumn {
            get {
                return this.columnVerificationComment;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ReviewCommentColumn {
            get {
                return this.columnReviewComment;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn InternalIdColumn {
            get {
                return this.columnInternalId;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn TDTextDiffColumn {
            get {
                return this.columnTDTextDiff;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn DeltaColumn {
            get {
                return this.columnDelta;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RequirementRow this[int index] {
            get {
                return ((RequirementRow)(this.Rows[index]));
            }
        }
        
        public event RequirementRowChangeEventHandler RequirementRowChanging;
        
        public event RequirementRowChangeEventHandler RequirementRowChanged;
        
        public event RequirementRowChangeEventHandler RequirementRowDeleting;
        
        public event RequirementRowChangeEventHandler RequirementRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddRequirementRow(RequirementRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RequirementRow AddRequirementRow(
                    string REQ_ID, 
                    string Doc_Sect, 
                    string Description, 
                    string Pos, 
                    string Neg, 
                    string Derived, 
                    string Scenario, 
                    string IsExtension, 
                    string Behavior, 
                    string Actor, 
                    string Scope, 
                    string Priority, 
                    string IsNormative, 
                    string Verification, 
                    string VerificationComment, 
                    string ReviewComment, 
                    string InternalId, 
                    string TDTextDiff, 
                    string Delta) {
            RequirementRow rowRequirementRow = ((RequirementRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    REQ_ID,
                    Doc_Sect,
                    Description,
                    Pos,
                    Neg,
                    Derived,
                    Scenario,
                    IsExtension,
                    Behavior,
                    Actor,
                    Scope,
                    Priority,
                    IsNormative,
                    Verification,
                    VerificationComment,
                    ReviewComment,
                    InternalId,
                    TDTextDiff,
                    Delta};
            rowRequirementRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowRequirementRow);
            return rowRequirementRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            RequirementDataTable cln = ((RequirementDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new RequirementDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnREQ_ID = base.Columns["REQ_ID"];
            this.columnDoc_Sect = base.Columns["Doc_Sect"];
            this.columnDescription = base.Columns["Description"];
            this.columnPos = base.Columns["Pos"];
            this.columnNeg = base.Columns["Neg"];
            this.columnDerived = base.Columns["Derived"];
            this.columnScenario = base.Columns["Scenario"];
            this.columnIsExtension = base.Columns["IsExtension"];
            this.columnBehavior = base.Columns["Behavior"];
            this.columnActor = base.Columns["Actor"];
            this.columnScope = base.Columns["Scope"];
            this.columnPriority = base.Columns["Priority"];
            this.columnIsNormative = base.Columns["IsNormative"];
            this.columnVerification = base.Columns["Verification"];
            this.columnVerificationComment = base.Columns["VerificationComment"];
            this.columnReviewComment = base.Columns["ReviewComment"];
            this.columnInternalId = base.Columns["InternalId"];
            this.columnTDTextDiff = base.Columns["TDTextDiff"];
            this.columnDelta = base.Columns["Delta"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnREQ_ID = new global::System.Data.DataColumn("REQ_ID", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnREQ_ID);
            this.columnDoc_Sect = new global::System.Data.DataColumn("Doc_Sect", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnDoc_Sect);
            this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnDescription);
            this.columnPos = new global::System.Data.DataColumn("Pos", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnPos);
            this.columnNeg = new global::System.Data.DataColumn("Neg", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnNeg);
            this.columnDerived = new global::System.Data.DataColumn("Derived", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnDerived);
            this.columnScenario = new global::System.Data.DataColumn("Scenario", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnScenario);
            this.columnIsExtension = new global::System.Data.DataColumn("IsExtension", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnIsExtension);
            this.columnBehavior = new global::System.Data.DataColumn("Behavior", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnBehavior);
            this.columnActor = new global::System.Data.DataColumn("Actor", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnActor);
            this.columnScope = new global::System.Data.DataColumn("Scope", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnScope);
            this.columnPriority = new global::System.Data.DataColumn("Priority", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnPriority);
            this.columnIsNormative = new global::System.Data.DataColumn("IsNormative", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnIsNormative);
            this.columnVerification = new global::System.Data.DataColumn("Verification", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnVerification);
            this.columnVerificationComment = new global::System.Data.DataColumn("VerificationComment", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnVerificationComment);
            this.columnReviewComment = new global::System.Data.DataColumn("ReviewComment", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnReviewComment);
            this.columnInternalId = new global::System.Data.DataColumn("InternalId", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnInternalId);
            this.columnTDTextDiff = new global::System.Data.DataColumn("TDTextDiff", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnTDTextDiff);
            this.columnDelta = new global::System.Data.DataColumn("Delta", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnDelta);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Unique_REQ_ID", new global::System.Data.DataColumn[] {
                            this.columnREQ_ID}, false));
            this.columnREQ_ID.AllowDBNull = false;
            this.columnREQ_ID.Unique = true;
            this.columnDescription.AllowDBNull = false;
            this.columnIsNormative.AllowDBNull = false;
            this.columnVerification.AllowDBNull = false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RequirementRow NewRequirementRow() {
            return ((RequirementRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new RequirementRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(RequirementRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.RequirementRowChanged != null)) {
                this.RequirementRowChanged(this, new RequirementRowChangeEvent(((RequirementRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.RequirementRowChanging != null)) {
                this.RequirementRowChanging(this, new RequirementRowChangeEvent(((RequirementRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.RequirementRowDeleted != null)) {
                this.RequirementRowDeleted(this, new RequirementRowChangeEvent(((RequirementRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.RequirementRowDeleting != null)) {
                this.RequirementRowDeleting(this, new RequirementRowChangeEvent(((RequirementRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveRequirementRow(RequirementRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            ReqTable ds = new ReqTable();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "RequirementDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class RequirementRow : global::System.Data.DataRow {
        
        private RequirementDataTable tableRequirement;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal RequirementRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableRequirement = ((RequirementDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string REQ_ID {
            get {
                return ((string)(this[this.tableRequirement.REQ_IDColumn]));
            }
            set {
                this[this.tableRequirement.REQ_IDColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Doc_Sect {
            get {
                try {
                    return ((string)(this[this.tableRequirement.Doc_SectColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'Doc_Sect\' in table \'Requirement\' is DBNull.", e);
                }
            }
            set {
                this[this.tableRequirement.Doc_SectColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Description {
            get {
                return ((string)(this[this.tableRequirement.DescriptionColumn]));
            }
            set {
                this[this.tableRequirement.DescriptionColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Pos {
            get {
                try {
                    return ((string)(this[this.tableRequirement.PosColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'Pos\' in table \'Requirement\' is DBNull.", e);
                }
            }
            set {
                this[this.tableRequirement.PosColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Neg {
            get {
                try {
                    return ((string)(this[this.tableRequirement.NegColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'Neg\' in table \'Requirement\' is DBNull.", e);
                }
            }
            set {
                this[this.tableRequirement.NegColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Derived {
            get {
                try {
                    return ((string)(this[this.tableRequirement.DerivedColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'Derived\' in table \'Requirement\' is DBNull.", e);
                }
            }
            set {
                this[this.tableRequirement.DerivedColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Scenario {
            get {
                try {
                    return ((string)(this[this.tableRequirement.ScenarioColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'Scenario\' in table \'Requirement\' is DBNull.", e);
                }
            }
            set {
                this[this.tableRequirement.ScenarioColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string IsExtension {
            get {
                try {
                    return ((string)(this[this.tableRequirement.IsExtensionColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'IsExtension\' in table \'Requirement\' is DBNull.", e);
                }
            }
            set {
                this[this.tableRequirement.IsExtensionColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Behavior {
            get {
                try {
                    return ((string)(this[this.tableRequirement.BehaviorColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'Behavior\' in table \'Requirement\' is DBNull.", e);
                }
            }
            set {
                this[this.tableRequirement.BehaviorColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Actor {
            get {
                try {
                    return ((string)(this[this.tableRequirement.ActorColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'Actor\' in table \'Requirement\' is DBNull.", e);
                }
            }
            set {
                this[this.tableRequirement.ActorColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Scope {
            get {
                try {
                    return ((string)(this[this.tableRequirement.ScopeColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'Scope\' in table \'Requirement\' is DBNull.", e);
                }
            }
            set {
                this[this.tableRequirement.ScopeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Priority {
            get {
                try {
                    return ((string)(this[this.tableRequirement.PriorityColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'Priority\' in table \'Requirement\' is DBNull.", e);
                }
            }
            set {
                this[this.tableRequirement.PriorityColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string IsNormative {
            get {
                return ((string)(this[this.tableRequirement.IsNormativeColumn]));
            }
            set {
                this[this.tableRequirement.IsNormativeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Verification {
            get {
                return ((string)(this[this.tableRequirement.VerificationColumn]));
            }
            set {
                this[this.tableRequirement.VerificationColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string VerificationComment {
            get {
                try {
                    return ((string)(this[this.tableRequirement.VerificationCommentColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'VerificationComment\' in table \'Requirement\' is DBNull.", e);
                }
            }
            set {
                this[this.tableRequirement.VerificationCommentColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ReviewComment {
            get {
                try {
                    return ((string)(this[this.tableRequirement.ReviewCommentColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'ReviewComment\' in table \'Requirement\' is DBNull.", e);
                }
            }
            set {
                this[this.tableRequirement.ReviewCommentColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string InternalId {
            get {
                try {
                    return ((string)(this[this.tableRequirement.InternalIdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'InternalId\' in table \'Requirement\' is DBNull.", e);
                }
            }
            set {
                this[this.tableRequirement.InternalIdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string TDTextDiff {
            get {
                try {
                    return ((string)(this[this.tableRequirement.TDTextDiffColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'TDTextDiff\' in table \'Requirement\' is DBNull.", e);
                }
            }
            set {
                this[this.tableRequirement.TDTextDiffColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Delta {
            get {
                try {
                    return ((string)(this[this.tableRequirement.DeltaColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'Delta\' in table \'Requirement\' is DBNull.", e);
                }
            }
            set {
                this[this.tableRequirement.DeltaColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsDoc_SectNull() {
            return this.IsNull(this.tableRequirement.Doc_SectColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetDoc_SectNull() {
            this[this.tableRequirement.Doc_SectColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsPosNull() {
            return this.IsNull(this.tableRequirement.PosColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetPosNull() {
            this[this.tableRequirement.PosColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsNegNull() {
            return this.IsNull(this.tableRequirement.NegColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetNegNull() {
            this[this.tableRequirement.NegColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsDerivedNull() {
            return this.IsNull(this.tableRequirement.DerivedColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetDerivedNull() {
            this[this.tableRequirement.DerivedColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsScenarioNull() {
            return this.IsNull(this.tableRequirement.ScenarioColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetScenarioNull() {
            this[this.tableRequirement.ScenarioColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsIsExtensionNull() {
            return this.IsNull(this.tableRequirement.IsExtensionColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetIsExtensionNull() {
            this[this.tableRequirement.IsExtensionColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsBehaviorNull() {
            return this.IsNull(this.tableRequirement.BehaviorColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetBehaviorNull() {
            this[this.tableRequirement.BehaviorColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsActorNull() {
            return this.IsNull(this.tableRequirement.ActorColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetActorNull() {
            this[this.tableRequirement.ActorColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsScopeNull() {
            return this.IsNull(this.tableRequirement.ScopeColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetScopeNull() {
            this[this.tableRequirement.ScopeColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsPriorityNull() {
            return this.IsNull(this.tableRequirement.PriorityColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetPriorityNull() {
            this[this.tableRequirement.PriorityColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsVerificationCommentNull() {
            return this.IsNull(this.tableRequirement.VerificationCommentColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetVerificationCommentNull() {
            this[this.tableRequirement.VerificationCommentColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsReviewCommentNull() {
            return this.IsNull(this.tableRequirement.ReviewCommentColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetReviewCommentNull() {
            this[this.tableRequirement.ReviewCommentColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsInternalIdNull() {
            return this.IsNull(this.tableRequirement.InternalIdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetInternalIdNull() {
            this[this.tableRequirement.InternalIdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsTDTextDiffNull() {
            return this.IsNull(this.tableRequirement.TDTextDiffColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetTDTextDiffNull() {
            this[this.tableRequirement.TDTextDiffColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsDeltaNull() {
            return this.IsNull(this.tableRequirement.DeltaColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetDeltaNull() {
            this[this.tableRequirement.DeltaColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class RequirementRowChangeEvent : global::System.EventArgs {
        
        private RequirementRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RequirementRowChangeEvent(RequirementRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RequirementRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
}
