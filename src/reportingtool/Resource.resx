<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GlobalTable" xml:space="preserve">
    <value>&lt;table cellpadding="2" cellspacing="2"&gt;
    &lt;caption&gt;&lt;h3&gt;$GLOBALTABLETITLE$&lt;br/&gt;
                  &lt;font color="#FF0000"&gt;$ErrorMessage$&lt;/font&gt;&lt;/h3&gt;
                  &lt;h4&gt;$GLOBALTABLEDISCRIPTION$&lt;/h4&gt;&lt;/caption&gt;
    &lt;col /&gt;
    &lt;thead&gt;&lt;tr&gt;&lt;th colspan="2"&gt;Requirement Type&lt;/th&gt;&lt;th colspan="5"&gt;Count/Percent&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;
    &lt;col /&gt;
    &lt;tbody&gt;
    &lt;tr&gt;
        &lt;td colspan="7"&gt;
        &lt;h3&gt;
            Checked Requirements:  %totalChecked%
        &lt;/h3&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan="7" align="center"&gt;
            Coverage of normative, in-scope requirements
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan="4"&gt;
            Checkable requirements
        &lt;/td&gt;
        &lt;td title="click to see details" colspan="3" onclick="ToggleAll('DerivedVerified', this.offsetParent, Hide);ToggleAll('DerivedPartialVerify', this.offsetParent, Hide);ToggleAll('DerivedUnverified', this.offsetParent, Hide);ToggleAll('FinalVerified', this.offsetParent, Show);ToggleAll('FinalPartialVerify', this.offsetParent, Show);ToggleAll('FinalUnverified', this.offsetParent, Show);"&gt;
            &lt;a href="#jump-detail"&gt;
            $finalToVerified$
            &lt;/a &gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
        &lt;td colspan="4"&gt;
            Completely checked requirements
        &lt;/td&gt;
        &lt;td title="click to see details" colspan="3" onclick="ToggleAll('DerivedVerified', this.offsetParent, Hide);ToggleAll('DerivedPartialVerify', this.offsetParent, Hide);ToggleAll('DerivedUnverified', this.offsetParent, Hide);ToggleAll('FinalVerified', this.offsetParent, Show);ToggleAll('FinalPartialVerify', this.offsetParent, Hide);ToggleAll('FinalUnverified', this.offsetParent, Hide);"&gt;
            &lt;a href="#jump-detail"&gt;
            $finalVerified$
            &lt;/a &gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan="4"&gt;
            Partially checked requirements
        &lt;/td&gt;
        &lt;td title="click to see details" colspan="3" onclick="ToggleAll('DerivedVerified', this.offsetParent, Hide);ToggleAll('DerivedPartialVerify', this.offsetParent, Hide);ToggleAll('DerivedUnverified', this.offsetParent, Hide);ToggleAll('FinalVerified', this.offsetParent, Hide);ToggleAll('FinalPartialVerify', this.offsetParent, Show);ToggleAll('FinalUnverified', this.offsetParent, Hide);"&gt;
            &lt;a href="#jump-detail"&gt;
            $finalPVerified$
            &lt;/a &gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
        &lt;td colspan="4"&gt;
            Unchecked requirements
        &lt;/td&gt;
        
        &lt;td title="click to see details" colspan="3" onclick="ToggleAll('DerivedVerified', this.offsetParent, Hide);ToggleAll('DerivedPartialVerify', this.offsetParent, Hide);ToggleAll('DerivedUnverified', this.offsetParent, Hide);ToggleAll('FinalVerified', this.offsetParent, Hide);ToggleAll('FinalPartialVerify', this.offsetParent, Hide);ToggleAll('FinalUnverified', this.offsetParent, Show);"&gt;
            &lt;a href="#jump-detail"&gt;
            $finalUVerified$
            &lt;/a &gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
        &lt;td colspan="7" align="center"&gt;
            Coverage of derived requirements
        &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr &gt;
        &lt;td colspan="4"&gt;
            Derived requirements
        &lt;/td&gt;
        &lt;td title="click to see details" colspan="3" onclick="ToggleAll('DerivedVerified', this.offsetParent, Show);ToggleAll('DerivedPartialVerify', this.offsetParent, Show);ToggleAll('DerivedUnverified', this.offsetParent, Show);ToggleAll('FinalVerified', this.offsetParent, Hide);ToggleAll('FinalPartialVerify', this.offsetParent, Hide);ToggleAll('FinalUnverified', this.offsetParent, Hide);"&gt;
            &lt;a href="#jump-detail"&gt;
            $derivedTotal$
            &lt;/a &gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr &gt;
        &lt;td colspan="4"&gt;
            Checked derived requirements
        &lt;/td&gt;
        &lt;td title="click to see details" colspan="3" onclick="ToggleAll('DerivedVerified', this.offsetParent, Show);ToggleAll('DerivedPartialVerify', this.offsetParent, Show);ToggleAll('DerivedUnverified', this.offsetParent, Hide);ToggleAll('FinalVerified', this.offsetParent, Hide);ToggleAll('FinalPartialVerify', this.offsetParent, Hide);ToggleAll('FinalUnverified', this.offsetParent, Hide);"&gt;
            &lt;a href="#jump-detail"&gt;
            $derivedVerified$
            &lt;/a &gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr &gt;
        &lt;td colspan="4"&gt;
            Unchecked derived requirements
        &lt;/td&gt;
        &lt;td title="click to see details" colspan="3" onclick="ToggleAll('DerivedVerified', this.offsetParent, Hide);ToggleAll('DerivedPartialVerify', this.offsetParent, Hide);ToggleAll('DerivedUnverified', this.offsetParent, Show);ToggleAll('FinalVerified', this.offsetParent, Hide);ToggleAll('FinalPartialVerify', this.offsetParent, Hide);ToggleAll('FinalUnverified', this.offsetParent, Hide);"&gt;
            &lt;a href="#jump-detail"&gt;
            $derivedUnverified$
            &lt;/a &gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
        &lt;td align="center" class="TableCellHighlighted" colspan="7"&gt;
            &lt;a name="jump-detail"&gt;Details:&lt;/a&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
        &lt;td style="width: 12%;"&gt;
            Req ID
        &lt;/td&gt;
        &lt;td&gt;
            Description
        &lt;/td&gt;
         &lt;td&gt;
            Doc Sect
        &lt;/td&gt;
	      &lt;td&gt;
            Scope
        &lt;/td&gt;
        &lt;td style="width: 10%;"&gt;
            Status
        &lt;/td&gt;
        &lt;td style="width: 13%;"&gt;
            Time Stamp
        &lt;/td&gt;
        &lt;td style="width: 10%;"&gt;
            Log Files
        &lt;/td&gt;
    &lt;/tr&gt;
    
    $DETAIL$
    &lt;/tbody&gt;
    &lt;/table&gt;&lt;br /&gt;</value>
  </data>
  <data name="HelpText" xml:space="preserve">
    <value>{0} -
    A utility which generates reports from PTF test logs and requirement table files.

{0} /log:&lt;xml log&gt; /table:&lt;requirements table&gt;[/out:report.html] [/replace] [/inscope:values] [/outofscope:values] [/prefix:MS-XXXX] [/verbose]
{0} /log:&lt;xml log&gt;[&lt;xml log&gt;....] /table:&lt;requirements table&gt;[&lt;requirements table&gt;...] [/out:report.html] [/replace] [/inscope:values] [/outofscope:values] [/prefix:MS-XXXX] [/verbose]

    - OPTIONS -

/help
    Prints this help message. Short form is '/?'.

/out:&lt;report.html&gt;
    Specifies the report filename. Short form is '/o:'.

/log:&lt;xml log&gt;
    Specifies the test log filename. Short form is '/l:'.

/table:&lt;requirement table&gt;
    Specifies the requirement table filename. Short form is '/t:'.
    
/replace
    Specifies the new output report file which will replace the old one.
    Short form is '/r'. Optional.
    
/inscope:&lt;scope value&gt;
    Specifies the in scope values which will be used to create in-scope rules.
    This parameter must be used binding with '/outofscope' parameter.
    Short form is '/ins:'. Optional, default values are 'Server+Both'.
    
/outofscope:&lt;scope values&gt;
    Specifies the out scope values which will be used to create out-of-scope rules.
    This parameter must be used binding with '/inscope' parameter.
    Short form is '/oos:'. Optional, default values are 'Client'.

/delta:&lt;delta type of test report&gt;
    Specifies the delta type of requirement coverage report, it can be a combination of the following options. 
        -New: all newly added(delta property is empty) requirements are calculated in the report. 
        -Changed: all changed requirements are calculated in the report. 
        -Unchanged: all requirements whose delta property are unchanged, section moved or editorial are calculated in the report. 
    Short form is '/d'. Optional.
    
/prefix:&lt;the prefix to build requirement id&gt;
    Specifies the prefix which is used to generate requirement id, like MS-XXXX_R.
    Short form is "/p:".
    
/verbose
    Trigger the verbose mode. The verbose mode will dump the inconsistency table for requirement capturing.
    Short form is "/v". Optional, ReportingTool will not dump that messages by default.
    
    - ARGUMENTS -

&lt;xml log&gt;            Filename of PTF test log in XML format.
&lt;requirement table&gt;  Filename of requirement table, XML format document of protocols.
&lt;scope values&gt;       String values of in-scope or out-of-scope. 
                     The arguments should be based on the following syntax:
                     &lt;scope values&gt;::=&lt;word&gt;[&lt;separator&gt;&lt;scope values&gt;] 
                     &lt;separator&gt;::="+" 
                     &lt;word&gt;:: =string of numbers and letters (no special characters and spaces) 

Multiple file arguments of the same type may be provided.</value>
  </data>
  <data name="HtmlTemplateFooter" xml:space="preserve">
    <value>$GLOBALSTAT$
    &lt;br/&gt;
    $GLOBALRSINCONSISTENCY$
    &lt;br/&gt;
    $GLOBALINCONSISTENCY$
    &lt;br/&gt;
    $EXCLUDEDREQUIREMENTS$
      &lt;/body&gt;
  &lt;/html&gt;</value>
  </data>
  <data name="HtmlTemplateHeader" xml:space="preserve">
    <value>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" &gt;
&lt;head&gt;
    &lt;meta http-equiv="content-type" content="text/html; charset=UTF-8" /&gt;
    &lt;title&gt;Reporting&lt;/title&gt;
    &lt;style type="text/css"&gt;
      table
      {
      width: 100%;
      background-color: #f8f8f8;
      border: 1px solid #505050;
      border-collapse: collapse;
      }
      tbody tr td
      {
      border: 1px solid #505050;
      }
      .TableCellHighlighted
      {
      font-size: 1.1em;
      background-color: #e0e0e0;
      border: 1px solid #909090;
      }
    .Unverified 
    {
        background-color: silver;
        display: none;
    }
    .Verified
    {
        background-color: green;
        display: none;
    }
    .NotToVerify
    {
        background-color: yellow;
        display: none;
    }
    .DerivedUnverified 
    {
        background-color: silver;
        display: none;
    }
    .DerivedVerified
    {
        background-color: green;
        display: none;
    }
    .DerivedPartialVerify
    {
        background-color: yellow;
        display: none;
    }
    .FinalUnverified 
    {
        background-color: silver;
        display: none;
    }
    .FinalVerified
    {
        background-color: green;
        display: none;
    }
    .FinalPartialVerify
    {
        background-color: yellow;
        display: none;
    }
    .InconsistencyWarning
    {
        background-color: yellow;
        display: none;
    }
    .InconsistencyError
    {
        background-color: red;
        display: none;
    }
    .RSInconsistencyError
    {
        background-color: red;
        display: none;
    }
    .RSInconsistencyWarning
    {
        background-color: yellow;
        display: none;
    }
    .RSExcluded
    {
        background-color: red;
    }
    &lt;/style&gt;
    &lt;script type="text/javascript"&gt;   
    function ToggleAll(className, parent, func)
    {
        var children = (parent !=null ? parent : document.body).getElementsByTagName('*');
        var pattern = new RegExp("(^|\\s)" + className + "(\\s|$)");
        for (var i = 0, length = children.length; i &lt; length; i++)
        {
            var child = children[i];
            var elementClassName = child.className;
            if (elementClassName.length == 0)
                continue;
            if (elementClassName == className || elementClassName.match(pattern))
                func(child);
        }
    }
    function Toggle(item)
    {
        var visible = (item.style.display != "none");
        if (visible)
            item.style.display = "none";
        else
            item.style.display = "table-row";
    }
    function Show(item)
    {
        item.style.display = "table-row";
    }
    function Hide(item)
    {
        item.style.display = "none";
    }
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;noscript&gt;Please enable Javascript to view the details&lt;/noscript&gt;
    </value>
  </data>
  
  <data name="RSInconsistencyTable" xml:space="preserve">
    <value>      
      &lt;table cellpadding="2" cellspacing="2"&gt;
      &lt;col /&gt;
      &lt;thead&gt;
          &lt;tr&gt;
              &lt;td align="center" class="TableCellHighlighted" colspan="3"&gt;
                  &lt;h4&gt;Requirement Inconsistencies&lt;/h4&gt;
              &lt;/td&gt;
          &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;col /&gt;
      &lt;tbody&gt;
          &lt;tr&gt;
              &lt;td colspan="2" style="width: 87%;"&gt;
                  $RSERRORS$
              &lt;/td&gt;
              &lt;td colspan="1" style="width: 13%;" title="click to see details" onclick="ToggleAll('RSInconsistencyError', this.offsetParent, Show);"&gt;
                  &lt;a href="#jump-rsinconsistencyerrors"&gt;
                  $RSInconsistentErrorsCount$
                  &lt;/a &gt;
              &lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
              &lt;td colspan="2" style="width: 87%;"&gt;
                  $RSWARNINGS$
              &lt;/td&gt;
              &lt;td colspan="1" style="width: 13%;" title="click to see details" onclick="ToggleAll('RSInconsistencyWarning', this.offsetParent, Show);"&gt;
                  &lt;a href="#jump-rsinconsistencywarnings"&gt;
                  $RSInconsistentWarningsCount$
                  &lt;/a &gt;
              &lt;/td&gt;
          &lt;/tr&gt;
          $RSINCONSISTENCYERRORS$
          $RSINCONSISTENCYWARNINGS$
      &lt;/tbody&gt;
      &lt;/table&gt;
    </value>
  </data>
  
  <data name="InconsistencyTable" xml:space="preserve">
    <value>&lt;table cellpadding="2" cellspacing="2"&gt;
    &lt;col/&gt;
    &lt;thead&gt;
        &lt;tr&gt;
              &lt;td align="center" class="TableCellHighlighted" colspan="7"&gt;
                  &lt;h4&gt;Requirement Verification Inconsistencies&lt;/h4&gt;
              &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;th colspan="3"&gt;Inconsistency type&lt;/th&gt;
            &lt;th colspan="4"&gt;Count&lt;/th&gt;
        &lt;/tr&gt;
     &lt;/thead&gt;
    &lt;col/&gt;
    &lt;tbody&gt;
    &lt;tr&gt;
        &lt;td colspan="3"&gt;
            $InconsistentErrors$
        &lt;/td&gt;
        &lt;td colspan="4" title="click to see details" onclick="ToggleAll('InconsistencyError', this.offsetParent, Show);"&gt;
            &lt;a href="#jump-inconsistencyerrors"&gt;
            $InconsistentErrorsCount$
            &lt;/a &gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan="3"&gt;
            $InconsistentWarnings$
        &lt;/td&gt;
        &lt;td colspan="4" title="click to see details" onclick="ToggleAll('InconsistencyWarning', this.offsetParent, Show);"&gt;
            &lt;a href="#jump-inconsistencywarnings"&gt;
            $InconsistentWarningsCount$
            &lt;/a &gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    $InconsistentErrorsDETAIL$
    $InconsistentWarningsDETAIL$
    &lt;/tbody&gt;
    &lt;/table&gt;&lt;br /&gt;</value>
  </data>
  
  <data name="LogTable" xml:space="preserve">
    <value>    &lt;table&gt;
        &lt;caption&gt;&lt;h3&gt;Report For Log $FILENAME$&lt;/h3&gt;&lt;/caption&gt;
        &lt;tr&gt;
            &lt;td&gt;
                Target Protocol: $PROTOCOL$&lt;/td&gt;
            &lt;td&gt;
                Log File: $FILENAME$
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align="center" class="TableCellHighlighted" colspan="2"&gt;
                PTFConfigProperties
            &lt;/td&gt;
        &lt;/tr&gt;
        $CONFIG$
        &lt;tr&gt;
            &lt;td align="center" class="TableCellHighlighted" colspan="2"&gt;
                PTFTestResult
            &lt;/td&gt;
        &lt;/tr&gt;
        $TESTRESULT$
        &lt;tr&gt;
            &lt;td&gt;
                CoveredRequirements
            &lt;/td&gt;
            &lt;td&gt;
                $Verified$
            &lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;</value>
  </data>
  
  <data name="ReqTable" xml:space="preserve">
    <value>    &lt;table&gt;
        &lt;tr&gt;
            &lt;td align="center" class="TableCellHighlighted" colspan="2"&gt;
                Requirement Coverage
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;Total requirements&lt;/td&gt;
        &lt;td&gt;$Total$&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;Normative, in-scope and testable requirements&lt;/td&gt;
        &lt;td&gt;$Verifiable$&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;Verified requirements&lt;/td&gt;
        &lt;td&gt;$Verified$
                &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;Unverified requirements&lt;/td&gt;
        &lt;td&gt;$Unverified$
                &lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;</value>
  </data>
  
  <data name="ExcludReqTable" xml:space="preserve">
    <value>&lt;table cellpadding="2" cellspacing="2"&gt;
    &lt;caption&gt;&lt;h3&gt;Requirements Excluded From Failed Cases&lt;/h3&gt;&lt;/caption&gt;
    &lt;col /&gt;
    &lt;thead&gt;
      &lt;tr&gt;
          &lt;td style="width: 12%;" class="TableCellHighlighted"&gt;
              Req ID
          &lt;/td&gt;
          &lt;td class="TableCellHighlighted"&gt;
              Description
          &lt;/td&gt;
          &lt;td style="width: 10%;" class="TableCellHighlighted"&gt;
              TestCase
          &lt;/td&gt;
          &lt;td style="width: 10%;" class="TableCellHighlighted"&gt;
              TestResult
          &lt;/td&gt;
          &lt;td style="width: 13%;" class="TableCellHighlighted"&gt;
              TimeStamp
          &lt;/td&gt;
          &lt;td style="width: 10%;" class="TableCellHighlighted"&gt;
              Log Files
          &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
    $ExcReqs$
    &lt;/tbody&gt;
    &lt;/table&gt;&lt;br /&gt;</value>
  </data>
  
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="requirementTable" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>requirementTable.xsd;System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;utf-8</value>
  </data>
  <data name="InconsistencyErrorMessage" xml:space="preserve">
    <value>&lt;br /&gt;The following data might not be accurate due to inconsistencies found in the requirements, please see &lt;a href='#jump-rsinconsistencyerrors'&gt;Requirement Inconsistencies&lt;/a&gt; for details.</value>
  </data>
</root>
